{"pages":[{"title":"我是谁？","text":"正如域名所示我是常州刘国钧高等职业技术学校 计算机专业 的一名废材技校生，这是一所江苏境内的五年制高职。正因为自己初中学习不够努力成绩一直处于平均水平以及热爱推广职业教育的常州 40% 多中考录取率，直到最后也没有什么彻底醒悟成绩突飞猛进只有知乎上才能看到的剧情，因此中考考了一个很平均的分数从而很不幸的进入了这一所奇怪的技校，现在即将升入三年级，也就是同龄人的高三。 我的人格是 INTJ ，是一个 十分内向 的人。当得知中考成绩后我释然了，心中毫无波动，但我知道自己的人生完蛋了。我这里中考也没有什么复读的说法，只能无奈的进入了这一所学校。学校的管理措施相比于其他技校似乎更加严格，但依旧无法挽回身边奇怪的同学智力低下的事实。 我可以肯定身边的同学根本不是来学计算机的。经历了一个学期的计算机基础的学习，我们班级较早开始了 C 语言 的课程，可是奇怪的同学依旧连计算机最基础的操作都不会，怎么可能完成编程语言的学习呢？以至于我亲眼看到我的同桌到期中考试连”Hello World”都写不出来，我无奈的笑了。 因为是技校，身边大多数人素质普遍比较低，因此 校园欺凌 是不可避免的。在班上我总能看到弱势的同学遭到强势学生过分的需求，以至于哭泣，甚至有些时候强势的学生当着部分老师的面实施欺凌，老师却能视而不见，悠哉的掏出他的手机，刷着某音，直到上课。正如同前文所说，我是一个十分内向的人，可能代码写的比其他人要好，有时候校园欺凌也会在我的头上发生，但是远不及上文同学的多，我都默默承受了。 emm 可能扯远了吧，技校的奇怪还有很多超乎你想象的，不过我不想再过多举例，下面来聊聊我自己。 “事务对我们都会有影响，其价值必须定量，而非定性地讨论。出去义务扫马路可以陶冶你的情操，还可以锻炼身体。坐在家里背单词背一天你可以学会数百个新单词，提升英语水平。按照上提到的“善意的逻辑”，这两者各有好处，仿佛难以取舍。但是我想在实际操作中，不会有人认为前者对你的益处更大。 说道理大家都清楚，但是在实际生活中，我们却总能见到某些组织的头目派手下同学站在食堂门口发传单，以“锻炼大家的社会实践能力”。我们也能见到不少同学东一榔头西一棒槌地学了许多与自己职业规划毫无关系的课程，美其名曰“扩充知识面”。 在打着各种华丽口号的诱惑面前，我们要保持清醒，并且时刻告诫自己 总有更值得做的事。” 我无法理解奇怪人的脑回路，因此我现在已经离开了班级和宿舍并加入了学校智能家居的集训队，因为是 全国职业院校技能大赛 因此难度十分低，与参加 noi 的 OIer 们完全没法比，可偏偏技校的比赛基本都是 团队型项目，也就代表着我要和奇怪的人一同比赛，我陷入了沉思。。 最后再说说自己的学习情况和对未来的展望吧~其实自己真正开始学习编程是从高职二年级开始的，因为受到了社交平台人们的启发（这个以后再聊），让我认知有很大提升，才开始踏入正轨。 现在已经过去一年了，我逐渐按时间学习了 C, Java, MySQL, SpringBoot, Android 等技术的基础（关于技术的话题以后会经常写的，本文就不展开了），现在正在学习 Android,Kotlin, C++, qt，在接下来的一年内我首先要应对技能比赛（希望队友能给点力 w），然后去学习自己薄弱的英语，多背单词和看英文文章，参加五年级的专转本考试（希望能考上个南京二本学校吧），再去学点高数并在闲暇时间看看Primer C++, CS:APP 和它对应的 15-213 课程 然后完成相应 lab，计算机网络等书，再学学前端 Vue 等技术，有空再做算法题， 再学学 Rust?，可能的话尝试去 github 参加些开源项目。。 补充 上海交通大学生存手册 邮箱: 3100825062@qq.com","link":"/about/index.html"}],"posts":[{"title":"『Kotlin 教程 (1)』 变量、逻辑控制语句、类与空安全机制","text":"大家好我又来更新博客啦，最近自己正在学习用 Kotlin 来编写 Android，决定写篇博客来巩固自身 Kotlin 语法。本博客尽可能采用 Kotlin 与 Java 互相对照方式来呈现，因此需要读者有一定的 Java 基础。 有关 Kotlin 的发展历史和环境搭建之类的请自行搜寻，毕竟大家也有一定的编程基础，就不再介绍了。 Kotlin 的基本数值类型包括Int、Long、Short、Float、Double、Boolean、Char、Byte 等，用法上与 Java 没有区别，但请仔细观察他们的大小写，避免不必要的错误。 变量Kotlin 的变量分为可变变量（var）和不可变变量(val) 12345678// 对应的 Kotlin 代码如下var &lt; 标识符 &gt; : &lt; 类型 &gt; = &lt; 初始化值 &gt; // 可变变量var a : Int = 1 // 为可变变量整型 a 赋值为 1val &lt; 标识符 &gt; : &lt; 类型 &gt; = &lt; 初始化值 &gt; // 不可变变量val b: Int = 1 // 为不可变变量整型 a 赋值为 1print(&quot;a 的大小为 -&gt;$a&quot;) // 输出 a 123456// 对应的 Java 代码如下int a = 1;final int b = 1； System.out.println(&quot;a 的大小为 -&gt;&quot; + a); 在我们编写代码中一般优先考虑val（不可变变量） 从上述代码可以很明显的发现 Kotlin 是 先写标识符后写类型的，这点可能会不太习惯，需要多加练习 $ 符号表示引用的意思。这里理解为 字符串模板，可快捷的对变量进行操作 每一行代码的结束可以省略掉分号 ; 第一次写可能会有一点不习惯。 编译器支持自动类型判断, 即声明时可以 不指定类型, 由编译器判断，因此上述代码可改为如下，我们应该尽可能的采用这种方式赋值 123var a = 1 // 为可变变量整形 a 赋值为 1val a = 1 // 为不可变变量整形 a 赋值为 1 for 循环 Kotlin 废除了 Java 中的 for(初始值; 条件; 增减步长) 这个规则。但是 Kotlin 中对于 for 循环语句新增了其他的规则，来满足我们的需求 123456789101112131415for(i in 0 until 3){ print(&quot;$i &quot;) // 输出 0 1 2 即为[n,m) 大于等于 n, 小于 m}for (i in 3 downTo 0){ print(&quot;$i &quot;) // 输出 3 2 1 0 即为[n,m] 小于等于 n, 大于等于 m ,n &gt; m}for (i in 0..3){ print(&quot;$i &quot;) // 输出 0 1 2 3 即为[n,m] 大于等于 n，小于等于 m}for (i in 0..3 step 2){ print(&quot;$i &quot;) // 输出 0 2 即设置步长为 2} 12345678910111213141516// 对应的 Java 代码for (int i = 0; i &lt; 3; i++) { System.out.print(i + &quot; &quot;);}for (int i = 3; i &gt;= 0 ; i--) { System.out.print(i + &quot; &quot;);}for (int i = 0; i &lt;= 3; i++) { System.out.print(i + &quot; &quot;);}for (int i = 0; i &lt;= 3; i=i+2) { System.out.print(i + &quot; &quot;);} 这里不再过多叙述，请仔细揣摩 When 语句 在 Kotlin 中废除了 Java 的 switch 语句，改为 When 语句，When 语句非常强大，还可以替代 if else() 语句 12345678when(3){ 1 -&gt; print(&quot;1&quot;) 2 -&gt; print(&quot;2&quot;) else -&gt;{ print(&quot;3&quot;) }}// 最终输出 3 1234567891011// 对应 java 代码switch (3){ case 1: System.out.print(&quot;1&quot;); break; case 2: System.out.print(&quot;2&quot;); break; default: System.out.print(&quot;3&quot;);} 这里只做简单介绍，请自己多加摸索 类的使用以及声明可空变量 Kotlin 和 Java 一样也有类和方法，但在 Kotlin 中我们一般把方法称之为 函数，类和函数的定义如下 12345678910111213141516class a { // 类名为 a private val age = 15 private lateinit var name: String // 声明一个变量并延迟初始化 private var hobby: String? = null // 要给变量赋值为 null 或 0 时，需要在类型后加？ // private val num2 会报错，Kotlin 在类中的基本数值类型必须初始化且无法使用 lateinit 延迟初始化 fun say() { // num = 17 报错，因为声明的是 val 所以不能修改 name = &quot; 张三 &quot; print(&quot; 我叫$name，今年${age} 岁了 &quot;) } // 成员函数}fun main() { val b:a = a() // 实例化 b.say() // 调用函数 sum 输出: 我叫张三，今年 15 岁了} 12345678910111213141516// 对应的 Java 代码class a{ private final int age = 15; private String name; private String hobby = null; void say(){ name = &quot; 张三 &quot;; System.out.println(&quot; 我叫 &quot; + name + &quot;, 今年 &quot; + age + &quot; 岁了 &quot;); } public static void main(String[] args) { final a b = new b(); b.say(); }} Kotlin 没有 new 关键字 由于 Kotlin 的空安全机制，可以有效防止程序出现空指针异常，因此需要进行额外的处理 创建成员对象必须初始化，如果不初始化，需使用 lateinit 关键字 基本数值类型无法使用 lateinit 关键字，必须赋值 要给变量赋值为 null 或 0 时，需要在类型后加?","link":"/2021/08/19/Kotlin%E5%AD%A6%E4%B9%A0-1/"},{"title":"『Kotlin 教程 (2)』 构造器、继承、接口","text":"这里是 Kotlin 基础教程的第二篇，本篇会简单快速的介绍 Kotlin 面向对象的几个重点。因博主自身也是个菜鸡，博文可能会出现错误，还请多多指教。另外本博客尽可能采用 Kotlin 与 Java 互相对照方式来呈现，因此需要读者有一定的 Java 基础。 构造器 Kotlin 的构造器写法与 Java 有些不同。在 Kotlin 中，允许有一个主构造函数和多个二级构造函数（辅助构造函数），其中主构造函数是类头的一部分。构造器一般用关键字constructor 表示，请仔细看下面例子 123456789101112131415class Test constructor(num1:Int) { // constructor 也可以省略 即 class a (num1:Int) { init { println(&quot;num1 = $num1&quot;) // 使用 init 可以对主构造器里值进行操作 } constructor(num1: Int,num2 : Int):this(num1){ // 这是二级构造，也就是 java 中的构造器重载 println(num1 + num2) }}fun main() { val test1:Test = Test(1) // 调用主构造实例化对象 val test2:Test = Test(1,2) // 调用主构造和二级构造实例化对象} 12345678910111213141516171819202122// 对应 Java 代码，未必完全对应，但思路一致public class Test { private int num1; private int num2; public Test(int num1){ this.num1 = num1; System.out.println(&quot;num1 = &quot; + num1); } public Test(int num1,int num2){ this(num1); this.num2 = num2; System.out.println(num1+num2); } public static void main(String[] args) { Test test1 = new Test(1); Test test2 = new Test(1,2); }} 结果输出 num1 = 1num1 = 13 请仔细对比观察，应当很好理解，对应 java 代码仅供参考，并非完全一致 Kotlin 实例化对象没有 new 关键字 主构造的 constructor 可以省略 构造器也可以赋初值class Test constructor(num1:Int = 1) {} ，但用的不多，如需了解请自行查阅资料 关于 get 和 set 方法，kotlin 自动生成，无需主动去写，想要详细了解请自行查阅资料 继承 Kotlin 继承写法与 Java 也有少些不同，定义继承类需要额外使用关键字 open。不管是类、还是成员都需要使用open 关键字。定义格式如下 1234567open class 类名{ open var/val 属性名 = 属性值 open fun 函数名() } 请看下面例子 123456789101112131415161718192021222324252627282930open class Person(name:String) {// 必须使用 open 关键字这个类才能被继承！这里是省略 constructor 关键字的主构造 constructor(name:String,age:Int):this(name){// 函数重载 println(&quot; 父类构造完成创建 &quot;) } open fun study(){ // 使用 open 关键字允许子类重写 println(&quot; 我上高中了 &quot;) }}class Student(name: String, age: Int,id:String,score:Int) : Person(name, age){//Student 类继承 Person 类。Person(name, age) 这里类似于 Java 的 super init { println(&quot; 子类构造完成创建 &quot;) println(&quot;name = $name&quot;) println(&quot;age = $age&quot;) println(&quot;id = $id&quot;) println(&quot;score = $score&quot;) } override fun study() { println(&quot; 我上技校了 &quot;) // 子类重写 study 方法 }}fun main() { val goodStudent:Person = Person(&quot; 张三 &quot;,17) // 实例化父类 goodStudent.study() // 调用父类 study 方法 println() val badStudent:Student = Student(&quot;Suemor&quot;,17,&quot;sb123&quot;,80) // 实例化子类 badStudent.study() // 调用子类重写父类的 study 方法} 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 对应 Java 代码，未必完全对应，但思路一致public class Person { private String name; private int age; public Person(String name){ this.name = name; } public Person(String name,int age){ this(name); this.age = age; System.out.println(&quot; 父类二级构造完成创建 &quot;); } public void study(){ System.out.println(&quot; 我上高中了 &quot;); }}class Student extends Person{ private String id; private int score; public Student(String name, int age,String id,int score) { super(name, age); this.id = id; this.score = score; System.out.println(&quot; 子类构造完成创建 &quot;); System.out.println(&quot;name = &quot; + name); System.out.println(&quot;age = &quot; + age); System.out.println(&quot;id = &quot; + id); System.out.println(&quot;score = &quot; + score); } @Override public void study() { System.out.println(&quot; 我上技校了 &quot;); } public static void main(String[] args) { Person goodStudent = new Person(&quot; 张三 &quot;, 17); goodStudent.study(); System.out.println(); Student badStudent = new Student(&quot;Suemor&quot;, 17, &quot;sb123&quot;, 80); badStudent.study(); }} 最终输出 父类构造完成创建 我上高中了 父类构造完成创建 子类构造完成创建 name = Suemorage = 17id = sb123score = 80 我上技校了 继承思路基本与 Java 相同，一定要仔细看例子并与 Java 代码对比，一定可以理解的 w 接口 接口定义关键字：interface，格式如下 123interface 接口名{ ...} 接口的实现，格式如下 1234class 类名 ： 接口名{ // 重写的接口函数、属性等 ...} 请看示例 1234567891011121314interface Person{ // 使用 interface 定义接口 fun name()}class Student : Person { // 使用: 来实现接口, 类似于 Java 的 implements 关键字 override fun name() { // 实现方法 println(&quot; 我的名字是 Suemor&quot;) }}fun main() { val student:Student = Student() // 实例化 Student student.name() // 调用实现的 name 方法} 123456789101112131415// 对应的 Java 代码interface Person { public void name();}class Student implements Person{ @Override public void name() { System.out.println(&quot; 我的名字是 Suemor&quot;); } public static void main(String[] args) { Student student = new Student(); student.name(); }} 最终输出 我的名字是 Suemor 使用 interface 定义接口 使用 : 来实现接口, 类似于 Java 的 implements 关键字","link":"/2021/08/20/Kotlin%E5%AD%A6%E4%B9%A0-2/"},{"title":"自我介绍","text":"正如域名所示我是常州刘国钧高等职业技术学校 计算机专业 的一名废材技校生，这是一所江苏境内的五年制高职。正因为自己初中学习不够努力成绩一直处于平均水平以及热爱推广职业教育的常州 40% 多中考录取率，直到最后也没有什么彻底醒悟成绩突飞猛进只有知乎上才能看到的剧情，因此中考考了一个很平均的分数从而很不幸的进入了这一所奇怪的技校，现在即将升入三年级，也就是同龄人的高三。 我的人格是 INTJ ，是一个 十分内向 的人。当得知中考成绩后我释然了，心中毫无波动，但我知道自己的人生完蛋了。我这里中考也没有什么复读的说法，只能无奈的进入了这一所学校。学校的管理措施相比于其他技校似乎更加严格，但依旧无法挽回身边奇怪的同学智力低下的事实。 我可以肯定身边的同学根本不是来学计算机的。经历了一个学期的计算机基础的学习，我们班级较早开始了 C 语言 的课程，可是奇怪的同学依旧连计算机最基础的操作都不会，怎么可能完成编程语言的学习呢？以至于我亲眼看到我的同桌到期中考试连”Hello World”都写不出来，我无奈的笑了。 因为是技校，身边大多数人素质普遍比较低，因此 校园欺凌 是不可避免的。在班上我总能看到弱势的同学遭到强势学生过分的需求，以至于哭泣，甚至有些时候强势的学生当着部分老师的面实施欺凌，老师却能视而不见，悠哉的掏出他的手机，刷着某音，直到上课。正如同前文所说，我是一个十分内向的人，可能代码写的比其他人要好，有时候校园欺凌也会在我的头上发生，但是远不及上文同学的多，我都默默承受了。 emm 可能扯远了吧，技校的奇怪还有很多超乎你想象的，不过我不想再过多举例，下面来聊聊我自己。 “事务对我们都会有影响，其价值必须定量，而非定性地讨论。出去义务扫马路可以陶冶你的情操，还可以锻炼身体。坐在家里背单词背一天你可以学会数百个新单词，提升英语水平。按照上提到的“善意的逻辑”，这两者各有好处，仿佛难以取舍。但是我想在实际操作中，不会有人认为前者对你的益处更大。 说道理大家都清楚，但是在实际生活中，我们却总能见到某些组织的头目派手下同学站在食堂门口发传单，以“锻炼大家的社会实践能力”。我们也能见到不少同学东一榔头西一棒槌地学了许多与自己职业规划毫无关系的课程，美其名曰“扩充知识面”。 在打着各种华丽口号的诱惑面前，我们要保持清醒，并且时刻告诫自己 总有更值得做的事。” 我无法理解奇怪人的脑回路，因此我现在已经离开了班级和宿舍并加入了学校智能家居的集训队，因为是 全国职业院校技能大赛 因此难度十分低，与参加 noi 的 OIer 们完全没法比，可偏偏技校的比赛基本都是 团队型项目，也就代表着我要和奇怪的人一同比赛，我陷入了沉思。。 最后再说说自己的学习情况和对未来的展望吧~其实自己真正开始学习编程是从高职二年级开始的，因为受到了社交平台人们的启发（这个以后再聊），让我认知有很大提升，才开始踏入正轨。 现在已经过去一年了，我逐渐按时间学习了 C, Java, MySQL, SpringBoot, Android 等技术的基础（关于技术的话题以后会经常写的，本文就不展开了），现在正在学习 Android,Kotlin, C++, qt，在接下来的一年内我首先要应对技能比赛（希望队友能给点力 w），然后去学习自己薄弱的英语，多背单词和看英文文章，参加五年级的专转本考试（希望能考上个南京二本学校吧），再去学点高数并在闲暇时间看看Primer C++, CS:APP 和它对应的 15-213 课程 然后完成相应 lab，计算机网络等书，再学学前端 Vue 等技术，有空再做算法题， 再学学 Rust?，可能的话尝试去 github 参加些开源项目。。 补充 上海交通大学生存手册 邮箱: 3100825062@qq.com","link":"/2021/08/17/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"}],"tags":[{"name":"学习","slug":"学习","link":"/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"Kotlin","slug":"Kotlin","link":"/tags/Kotlin/"},{"name":"日常","slug":"日常","link":"/tags/%E6%97%A5%E5%B8%B8/"}],"categories":[{"name":"Kotlin","slug":"Kotlin","link":"/categories/Kotlin/"},{"name":"日常","slug":"日常","link":"/categories/%E6%97%A5%E5%B8%B8/"}]}